//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestProject.EspecialidadService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Especialidad", Namespace="http://schemas.datacontract.org/2004/07/ProjectRest.Dominio")]
    [System.SerializableAttribute()]
    public partial class Especialidad : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Co_EspecialidadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string No_EspecialidadField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Co_Especialidad {
            get {
                return this.Co_EspecialidadField;
            }
            set {
                if ((this.Co_EspecialidadField.Equals(value) != true)) {
                    this.Co_EspecialidadField = value;
                    this.RaisePropertyChanged("Co_Especialidad");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string No_Especialidad {
            get {
                return this.No_EspecialidadField;
            }
            set {
                if ((object.ReferenceEquals(this.No_EspecialidadField, value) != true)) {
                    this.No_EspecialidadField = value;
                    this.RaisePropertyChanged("No_Especialidad");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EspecialidadService.IEspecialidades")]
    public interface IEspecialidades {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEspecialidades/CrearEspecialidad", ReplyAction="http://tempuri.org/IEspecialidades/CrearEspecialidadResponse")]
        TestProject.EspecialidadService.Especialidad CrearEspecialidad(string nombre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEspecialidades/CrearEspecialidad", ReplyAction="http://tempuri.org/IEspecialidades/CrearEspecialidadResponse")]
        System.Threading.Tasks.Task<TestProject.EspecialidadService.Especialidad> CrearEspecialidadAsync(string nombre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEspecialidades/ObtenerEspecialidad", ReplyAction="http://tempuri.org/IEspecialidades/ObtenerEspecialidadResponse")]
        TestProject.EspecialidadService.Especialidad ObtenerEspecialidad(int cod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEspecialidades/ObtenerEspecialidad", ReplyAction="http://tempuri.org/IEspecialidades/ObtenerEspecialidadResponse")]
        System.Threading.Tasks.Task<TestProject.EspecialidadService.Especialidad> ObtenerEspecialidadAsync(int cod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEspecialidades/ObtenerNombreEspecialidad", ReplyAction="http://tempuri.org/IEspecialidades/ObtenerNombreEspecialidadResponse")]
        string ObtenerNombreEspecialidad(int cod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEspecialidades/ObtenerNombreEspecialidad", ReplyAction="http://tempuri.org/IEspecialidades/ObtenerNombreEspecialidadResponse")]
        System.Threading.Tasks.Task<string> ObtenerNombreEspecialidadAsync(int cod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEspecialidades/ModificarEspecialidad", ReplyAction="http://tempuri.org/IEspecialidades/ModificarEspecialidadResponse")]
        TestProject.EspecialidadService.Especialidad ModificarEspecialidad(int id, string nombre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEspecialidades/ModificarEspecialidad", ReplyAction="http://tempuri.org/IEspecialidades/ModificarEspecialidadResponse")]
        System.Threading.Tasks.Task<TestProject.EspecialidadService.Especialidad> ModificarEspecialidadAsync(int id, string nombre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEspecialidades/EliminarEspecialidad", ReplyAction="http://tempuri.org/IEspecialidades/EliminarEspecialidadResponse")]
        void EliminarEspecialidad(int cod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEspecialidades/EliminarEspecialidad", ReplyAction="http://tempuri.org/IEspecialidades/EliminarEspecialidadResponse")]
        System.Threading.Tasks.Task EliminarEspecialidadAsync(int cod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEspecialidades/ListarEspecialidades", ReplyAction="http://tempuri.org/IEspecialidades/ListarEspecialidadesResponse")]
        TestProject.EspecialidadService.Especialidad[] ListarEspecialidades();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEspecialidades/ListarEspecialidades", ReplyAction="http://tempuri.org/IEspecialidades/ListarEspecialidadesResponse")]
        System.Threading.Tasks.Task<TestProject.EspecialidadService.Especialidad[]> ListarEspecialidadesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEspecialidadesChannel : TestProject.EspecialidadService.IEspecialidades, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EspecialidadesClient : System.ServiceModel.ClientBase<TestProject.EspecialidadService.IEspecialidades>, TestProject.EspecialidadService.IEspecialidades {
        
        public EspecialidadesClient() {
        }
        
        public EspecialidadesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EspecialidadesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EspecialidadesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EspecialidadesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestProject.EspecialidadService.Especialidad CrearEspecialidad(string nombre) {
            return base.Channel.CrearEspecialidad(nombre);
        }
        
        public System.Threading.Tasks.Task<TestProject.EspecialidadService.Especialidad> CrearEspecialidadAsync(string nombre) {
            return base.Channel.CrearEspecialidadAsync(nombre);
        }
        
        public TestProject.EspecialidadService.Especialidad ObtenerEspecialidad(int cod) {
            return base.Channel.ObtenerEspecialidad(cod);
        }
        
        public System.Threading.Tasks.Task<TestProject.EspecialidadService.Especialidad> ObtenerEspecialidadAsync(int cod) {
            return base.Channel.ObtenerEspecialidadAsync(cod);
        }
        
        public string ObtenerNombreEspecialidad(int cod) {
            return base.Channel.ObtenerNombreEspecialidad(cod);
        }
        
        public System.Threading.Tasks.Task<string> ObtenerNombreEspecialidadAsync(int cod) {
            return base.Channel.ObtenerNombreEspecialidadAsync(cod);
        }
        
        public TestProject.EspecialidadService.Especialidad ModificarEspecialidad(int id, string nombre) {
            return base.Channel.ModificarEspecialidad(id, nombre);
        }
        
        public System.Threading.Tasks.Task<TestProject.EspecialidadService.Especialidad> ModificarEspecialidadAsync(int id, string nombre) {
            return base.Channel.ModificarEspecialidadAsync(id, nombre);
        }
        
        public void EliminarEspecialidad(int cod) {
            base.Channel.EliminarEspecialidad(cod);
        }
        
        public System.Threading.Tasks.Task EliminarEspecialidadAsync(int cod) {
            return base.Channel.EliminarEspecialidadAsync(cod);
        }
        
        public TestProject.EspecialidadService.Especialidad[] ListarEspecialidades() {
            return base.Channel.ListarEspecialidades();
        }
        
        public System.Threading.Tasks.Task<TestProject.EspecialidadService.Especialidad[]> ListarEspecialidadesAsync() {
            return base.Channel.ListarEspecialidadesAsync();
        }
    }
}
